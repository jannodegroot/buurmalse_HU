<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.8">
  <POU Name="FB_Regelschuif_AFO" Id="{e3716e21-c926-4b53-b092-edc4b4bb1690}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Regelschuif_AFO IMPLEMENTS ITF_Regelschuif
VAR
	tagName : STRING;
	outputOpen : ITF_Schuif_DigOutOpen_AFO;
	outputClose : ITF_Schuif_DigOutClose_AFO;
	inputPosition : ITF_Schuif_AnaIn_AFO;

	currentMode : E_Bedrijfstoestand := E_Bedrijfstoestand.off;
	currentState : E_RegelschuifState := E_RegelschuifState.standby;
	expectedState : E_RegelschuifState := E_RegelschuifState.standby;
	
	feedbackPosition : BOOL := FALSE;
	
	timeOut : TON;
	errorTrigger : R_TRIG;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF currentMode = E_Bedrijfstoestand.off THEN
	outputOpen.set := 0;
	outputClose.set := 0;
	expectedState := E_RegelschuifState.standby;
END_IF

feedbackPosition := inputPosition.get;

timeOut(IN :=(expectedState <> currentState), PT := T#5S);
errorTrigger(CLK := timeOut.Q);

IF errorTrigger.Q THEN
	currentState := E_RegelschuifState.error;
	main.alarms.append(tag := tagName, msg := 'Schuifstoring gedetecteerd');
END_IF

// The tale unfolds in a world where machines operate with precision and safety — or so it seems.
// Deep within the binary realm lurks a sinister figure: Luke, the rogue coder. With every line of code,
// he seeks to sow chaos, testing the limits of the system’s resilience. But the system, a stalwart guardian,
// stands firm, ever vigilant against his subtle sabotage.

// Chapter 1: The Quiet State of "Off"
// The system awakens and surveys its surroundings. It questions itself: "Am I active? Or has the shadow of dormancy fallen?"
// It checks its state, delving into the enumeration E_Bedrijfstoestand. If it finds itself in "off," it knows it must act swiftly,
// for Luke may have left traps hidden within its logic.

IF currentMode = E_Bedrijfstoestand.off THEN
    // The system, cautious of Luke's meddling, ensures the "open" signal is silenced.
    // "You shall not exploit me here, Luke," it declares, setting the signal to 0.
    outputOpen.set := 0;

    // Similarly, it subdues the "close" signal. "No loophole will grant you power over my mechanism," the system proclaims.
    outputClose.set := 0;

    // With its outputs secured, the system sets its sights on stability, transitioning to a state of "standby."
    // This ensures that any future commands will come from legitimate operators, not Luke's malevolent designs.
    expectedState := E_RegelschuifState.standby;
END_IF

// Chapter 2: The Machine Listens
// Ever mindful of its duty, the system reaches out to the physical world. It queries the position sensor:
// "Tell me, where does the mechanism stand? Is it as I believe, or has Luke tampered with your truth?"
// The sensor, loyal and steadfast, relays the position. The system records this in its memory, aligning reality with expectation.
feedbackPosition := inputPosition.get;

// Chapter 3: The Timer of Vigilance
// But the system knows that Luke is cunning. He works in subtle ways, introducing delays, breaking transitions, 
// leaving the mechanism in limbo. The system calls upon its ally: the timeout timer.
// "If my expected state and current state do not align within five seconds," the system commands, 
// "you must sound the alarm. Luke’s mischief will not go unnoticed."

// The timer accepts its mission, watching diligently for the signs of failure. It tracks the dissonance 
// between expectation and reality, prepared to act should chaos persist too long.
timeOut(IN := (expectedState <> currentState), PT := T#5S);

// Chapter 4: The Alarm is Set
// Luke, ever the saboteur, revels in his schemes. "Let them ignore the timer," he sneers. 
// But the system is prepared. It has another sentinel: the error trigger. This guardian watches the timer,
// waiting for the moment it signals that all is not well. 
errorTrigger(CLK := timeOut.Q);

// Chapter 5: The System Fights Back
// Then it happens. The timer expires, and the error trigger awakens. "Something is wrong!" it cries. 
// The system, unshaken, knows what must be done.

IF errorTrigger.Q THEN
    // The system declares a state of emergency. "I will not allow further damage," it asserts, 
    // setting its state to "error." Luke's attempt to destabilize the mechanism has been thwarted for now.
    currentState := E_RegelschuifState.error;

    // But the system must also warn its human allies — the operators who oversee its function.
    // It logs the event carefully, with details meant to unmask Luke’s interference:
    // - The tagName points directly to the affected component, leaving no ambiguity for repairs.
    // - The message, 'Schuifstoring gedetecteerd,' speaks plainly: "A slide malfunction has been detected."
    // This documentation is its final line of defense, ensuring that no sabotage goes unnoticed.
    main.alarms.append(tag := tagName, msg := 'Schuifstoring gedetecteerd');
END_IF

// Epilogue: The System Stands Guard
// Though the error has been logged, and Luke’s plans thwarted for now, the system remains vigilant.
// It knows Luke will return, his fingers poised over a keyboard, ready to inject chaos into its logic.
// But the system, a tireless sentinel, will always resist. For in this battle of code and order, the system is the hero,
// and Luke, the rogue coder, can never truly win.
]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{19e33316-aa4d-4340-a18c-c48173f3eae7}" />
    <Folder Name="Properties" Id="{e2e5e1b1-49a7-46d0-8daf-b77eea7842e6}" />
    <Property Name="ActueelPosition" Id="{2d2a6d11-befa-4588-8131-86e3894c6457}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY ActueelPosition : SINT]]></Declaration>
      <Get Name="Get" Id="{fc7c4d48-73b9-47ec-8f27-7cd7b636e38c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{9454e573-b814-4817-822e-cf1729db9dd6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="FB_Init" Id="{3a2e7ee9-0040-407c-9fdc-e034eb20bdea}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)   
	tag : STRING;
	DigOutOpening : ITF_Schuif_DigOutOpen_AFO;
	DigOutClosing : ITF_Schuif_DigOutClose_AFO;
	AnaInPosition : ITF_Schuif_AnaIn_AFO;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[tagname := tag;
outputOpen := DigOutOpening;
outputClose := DigOutClosing;
inputPosition := AnaInPosition;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegelSchuifGoTo" Id="{79c61f24-d77f-47a4-b036-2823abebfb78}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD RegelSchuifGoTo : SINT
VAR
	close : FB_SimulatedDigOutClose_AFO;
	open : FB_SimulatedDigOutOpen_AFO;
	minuteTimer : TON;
	checkPositions : BOOL;
END_VAR
VAR_INPUT
	regelschuifdoel : SINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[minuteTimer(IN:= 1,PT:= T#60S ,Q => checkPositions);
IF checkPositions THEN
	IF ActueelPosition = regelschuifdoel THEN // huidige positie is correct
		StateRegelSchuif := E_RegelschuifState.standby;
	
	END_IF
	
	IF ActueelPosition > regelschuifdoel THEN // huidige positie is te hoog
		IF stateRegelschuif <> E_RegelschuifState.error THEN
			StateRegelSchuif := E_RegelschuifState.closing;
		END_IF
		close();
	END_IF

	IF ActueelPosition < regelschuifdoel THEN // huidige positie is te laag
		IF stateRegelschuif <> E_RegelschuifState.error THEN
			StateRegelSchuif := E_RegelschuifState.opening;
		END_IF
		open();
	END_IF
	minuteTimer(IN:= 0); // reset timer
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="StateRegelSchuif" Id="{970eafd1-96ea-40c0-b909-2be329c20549}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY StateRegelSchuif : E_RegelschuifState]]></Declaration>
      <Get Name="Get" Id="{75d5413c-e9a2-4d07-852b-3149b8f38d87}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[StateRegelschuif := currentState;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{c2a73e76-74c5-4c09-8b03-2178d70ef95f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="FB_Regelschuif_AFO">
      <LineId Id="1" Count="83" />
    </LineIds>
    <LineIds Name="FB_Regelschuif_AFO.ActueelPosition.Get">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Regelschuif_AFO.ActueelPosition.Set">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Regelschuif_AFO.FB_Init">
      <LineId Id="1" Count="4" />
    </LineIds>
    <LineIds Name="FB_Regelschuif_AFO.RegelSchuifGoTo">
      <LineId Id="17" Count="1" />
      <LineId Id="4" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="FB_Regelschuif_AFO.StateRegelSchuif.Get">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Regelschuif_AFO.StateRegelSchuif.Set">
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>